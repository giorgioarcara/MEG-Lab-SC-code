%%Normalizzazione misure di connettivit√† Active ASSR/Rest
addpath ('/storages/LDATA/Code/brainstorm3')
addpath ('/storages/LDATA/Code/Scripts ASSR')

if ~brainstorm('status')
    brainstorm nogui
end
ProtocolName = 'OtherConnectivityMetrics_tDCS_ASSR';
% Get the protocol index
iProtocol = bst_get('Protocol', ProtocolName);
if isempty(iProtocol)
    error(['Unknown protocol: ' ProtocolName]);
end
% Select the current procotol
gui_brainstorm('SetCurrentProtocol', iProtocol);

path_data='/storages/LDATA/BrainstormDB/OtherConnectivityMetrics_tDCS_ASSR/data/';
fnames = dir('/storages/LDATA/BrainstormDB/OtherConnectivityMetrics_tDCS_ASSR/data/Subject*');

Labels_Active={...
    'AEC: Left_SM1, mean after | _active', ...
    'AEC: Right_SM1, mean after | _active', ...
    'AEC: ASSR_Right, mean after | _active', ...
    'AEC: ASSR_Left, mean after | _active', ...
    'Corr: Left_SM1, mean after | _active', ...
    'Corr: Right_SM1, mean after | _active', ...
    'Corr: ASSR_Right, mean after | _active', ...
    'Corr: ASSR_Left, mean after | _active', ...
    'Envelope: Left_SM1, mean after | _active', ...
    'Envelope: Right_SM1, mean after | _active', ...
    'Envelope: ASSR_Right, mean after | _active', ...
    'Envelope: ASSR_Left, mean after | _active', ...
    'PLV: Left_SM1, mean after | _active', ...
    'PLV: Right_SM1, mean after | _active', ...
    'PLV: ASSR_Right, mean after | _active', ...
    'PLV: ASSR_Left, mean after | _active'};

Labels_Rest={...
    'AEC: Left_SM1, mean after | _baseline', ...
    'AEC: Right_SM1, mean after | _baseline', ...
    'AEC: ASSR_Right, mean after | _baseline', ...
    'AEC: ASSR_Left, mean after | _baseline', ... 
    'Corr: Left_SM1, mean after | _baseline', ...
    'Corr: Right_SM1, mean after | _baseline', ...
    'Corr: ASSR_Right, mean after | _baseline', ...
    'Corr: ASSR_Left, mean after | _baseline', ...
    'Envelope: Left_SM1, mean after | _baseline', ...
    'Envelope: Right_SM1, mean after | _baseline', ...
    'Envelope: ASSR_Right, mean after | _baseline', ...
    'Envelope: ASSR_Left, mean after | _baseline', ...   
    'PLV: Left_SM1, mean after | _baseline', ...
    'PLV: Right_SM1, mean after | _baseline', ...
    'PLV: ASSR_Right, mean after | _baseline', ...
    'PLV: ASSR_Left, mean after | _baseline'};


% Labels_Active={...
%     'Coh Left_SM1, mean after | _active', ...
%     'Coh Right_SM1, mean after | _active', ...
%     'Coh ASSR_Right, mean after | _active', ...
%     'Coh ASSR_Left, mean after | _active'};
% 
% Labels_Rest={...
%     'Coh Left_SM1, mean after | _baseline', ...
%     'Coh Right_SM1, mean after | _baseline', ...
%     'Coh ASSR_Right, mean after | _baseline', ...
%     'Coh ASSR_Left, mean after | _baseline'};
% 



for gg=1:length(fnames) %run over patients
    [pathstr,name,ext] = fileparts(fnames(gg,1).name);
    display(name)
    runs_names = dir([path_data name '/*_P*']);
    for hh=1:length(runs_names) %run over runs
        [pathstr_run,run,ext_run] = fileparts(runs_names(hh,1).name);
        display(run)
        data_names=dir([path_data name '/' run '/timefreq_connect1*']); %find all timefrequency files of the run
        for gg=1:size(data_names,1)
            sFiles(1,gg)={['/' name '/' run '/' data_names(gg,1).name]};
        end
        % Select files
        for pp=1:length(Labels_Active)
            try
                GroupA = bst_process('CallProcess', 'process_select_tag', sFiles, [], ...
                    'tag',    Labels_Rest{1,pp}, ...
                    'search', 2, ...  % Search the file comments
                    'select', 1);  
                FilesGroupA={GroupA(1,:).FileName};
            catch
                warning(['Problem with GroupA files...' name ' ' run ' ' Labels_Rest{1,pp}]);
            end
            try
                GroupB = bst_process('CallProcess', 'process_select_tag', sFiles, [], ...
                    'tag',    Labels_Active{1,pp}, ...
                    'search', 2, ...  % Search the file comments
                    'select', 1);  
                FilesGroupB={GroupB(1,:).FileName};
            catch
                warning(['Problem with GroupB files' name ' ' run ' ' Labels_Active{1,pp}]);
            end
            try
                % Normalization
                sFiles_norm = bst_process('CallProcess', 'process_matlab_eval2', FilesGroupA, FilesGroupB, ...
                    'matlab', ['Data = ((DataB - DataA)./ DataA)*100;' 10 '']);
            catch
                warning(['Problem with normalization...' name run]);
            end
            clear FilesGroupA FilesGroupB GroupA GroupB sFiles_norm
        end
    end
    clear sFiles data_names
end

